sqrt(deviance(fit)/(n-2))
mu <- mean(galton$children)
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$parents, galton$children)^2
play()
?cor
cor(galton)
cor(galton$child, galton$parents)
cor(as.numeric(galton$child), as.numeric(galton$parents)
cor(as.numeric(galton$child), as.numeric(galton$parents))
class(galton$child)
head(galton$child)
head(galton$parents)
head(galton$parent)
cor(galton$child, galton$parent)
nxt()
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child~parent+1)
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
view(trees2)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
all <- lm(Fertility ~. , data = swiss)
all
summary(all)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
summary(lm(Fertility ~ Agriculture, data = swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(Agriculture, Education, data = swiss)
with(swiss, cor(Agriculture, Education))
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
swirl()
efit <- lm(Fertility ~. + ec, data = swiss)
efit <- lm(Fertility ~. + ec, data = swiss)
head(ec)
swirl()
ec <- swiss$Examination + swiss$Catholic
swirl()
swiss$Examination
swirl()
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . , swiss)
swirl()
all <- lm(Fertility ~. , swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Educaion, swiss$Examination)
cor(swiss$Education, swiss$Examination)
cor(swiss$Education, swiss$Agriculture)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~. + ec, swiss)
all$coef - efit$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSpray, 15)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays[,2], class)
sapply(InsectSprays,class)
fit <- lm(count ~ sprays, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summry(fit)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(fit)$coef
summary(nfit)$coef
spray2 <- releval(InsectSprays, "C")
spray2 <- relevel(InsectSprays, "C")
spray2 <- relevel(InsectSprays, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(count ~ spray - 1, spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summray(fit2)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numberix ~ Year, hunger)
fit <- lm(Numberic ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female",])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex == "Male"]~Year[Sex == "Male"], hunger)
lmBoth <- lm[Numeric ~ Year + Sex, hunger]
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)$coef
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex * Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1,])
plot(fit, which = 1)
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2)/df(fit))
sigma <- sqrt(sum(resid(fit)^2)/fit$df
sigma <- sqrt(sum(resid(fit)^2)/fit$df)
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/fitno(df))
sigma1 <- sqrt(deviance(fitno)/fitno$df)
resid(fit)[1]/sigma*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~. , swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Catholic + Education + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
info()
bye()
fit <- lm(mpg~cyl+wt, mtcars)
summary(fit)$coef
mtcars$cyl <- as.factor(mtcars$cyl)
fit <- lm(mpg~cyl+wt, mtcars)
summary(fit)$coef
fit2 <- lm(mpg ~ cyl, mtcars)
summary(fit2)$coef
fit3 <- lm(mpg ~ cyl*wt, mtcars)
summary(fit3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
round(hatvalues(fit),4)
round(dfbetas(fit),4)
?mtcars
?pbinom
pbinom(92, 100, prob = .9)
pbinom(92, 100, prob = .9) - pbinom(91, 100, prob = .9)
?pnorm
pnorm(33, 24, 4, lower.tail = FALSE)
pnorm(33, mean = 24, sd = 4, lower.tail = FALSE)
pnorm(33, mean = 24, sd = 4, lower.tail = FALSE)
0.15/(0.15+0.175)
160*.28
pnorm(49, 160*.28,lower.tail = FALSE )
pnorm(45, 160*.28, lower.tail = FALSE)
pnorm(49, 160*.28, lower.tail = FALSE)
160*.28
pnorm(49, 160*.28, sd = 160*.28(1-.28), lower.tail = FALSE)
pnorm(49, 160*.28, sd = 160*.28*(1-.28), lower.tail = FALSE)
sd <- sqrt(60*.28*(1-.28)); pnorm(49, 160*.28, sd, lower.tail = FALSE)
sd
sd <- sqrt(160*.28*(1-.28)); pnorm(49, 160*.28, sd, lower.tail = FALSE)
sd <- sqrt(160*.28*(1-.28)); pnorm(50, 160*.28, sd, lower.tail = FALSE)
sd <- sqrt(160*.28*(1-.28)); pnorm(49.5, 160*.28, sd, lower.tail = FALSE)
sd
?pbinom
1-pbinom(1, 10, prob = .07)
pbinom(0, 10, prob = .07)
?pnorm
n <- 10
p <- .07
sd <- sqrt(n*p*(1-P))
mean <- np
pnorm(1, mean, sd, lower.tail = FALSE)
n <- 10
p <- .07
sd <- sqrt(n*p*(1-p))
mean <- np
pnorm(1, mean, sd, lower.tail = FALSE)
n <- 10
p <- .07
sd <- sqrt(n*p*(1-p))
mean <- n*p
pnorm(1, mean, sd, lower.tail = FALSE)
pbinom(1, size = 10, prob = .07, lower.tail = FALSE)
pbinom(0, size = 10, prob = .07, lower.tail = FALSE)
pbinom(2, size = 3, prob = .51) - pbinom(1, size = 3, prob = .51)
pbinom(50, size = 160, prob = .28, lower.tail = False)
pbinom(50, size = 160, prob = .28, lower.tail = FALSE)
pbinom(49, size = 160, prob = .28, lower.tail = FALSE)
.73*.77/(.73*.77+.61*.23)
.61*.23/(.61*.23+.73*.77)
143.63/3
qnorm(.795)
51.5/75
head(mtcars)
?mtcars
str(mtcars)
?transform
cars <- transform(mtcars, am = as.factor(am))
head(cars)
str(cars)
lirary(swirl)
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(tress)
head(tree)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",
| trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
dim(hunger)
948
names(hunger)
hunger(Numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)
summary(fit$coef)
summary(fit)$coef
lmF <- lm(Numeric ~ Year[hunger$sex == "Female"])
skip()
skip()
skip()
skip()
skip()
summary(lmInter)
info()
main()
skip()
skip()
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
skip()
skip()
skip()
cars <- transform(mtcars, am = as.factor(am))
lm(mpg ~., cars)
?mtcars
head(cars)
lm(mpg ~., mtcars)
?pairs
library(datasets); data(mtcars); require(stats); require(graphics)
pairs(mtcars, panel = panel.smooth, main = "mtcars data")
head(swiss)
lm(mpg ~ am, cars)
str(cars)
cars <- transform(mtcars, am = as.factor(am))
fit <- lm(mpg ~., cars)
fit1 <- lm(mpg ~ am, cars)
fit$coef
fit1$coef
summary(fit1)$coef
summary(fit)$coef
?mtcars
names(mtcars)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2])
print(cf)
}
makelms()
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2])
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2]
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2]
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2]
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2]
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2]
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
makelm()
makelms()
makelmcars <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am, cars))[2],
coef(lm(mpg ~ am + cyl, cars))[2],
coef(lm(mpg ~ am + cyl + disp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, cars))[2],
coef(lm(mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, cars))[2])
print(cf)
}
makelmcars
makelmcars()
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms
makelms()
str(cars$vs)
summary(swiss$catholic)
summary(swiss$Catholic)
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
pattern$time <- format(pattern$time, "%H:%M")
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
setwd("~/Desktop/reproducible_research/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
pattern$time <- format(pattern$time, "%H:%M")
head(pattern)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
pattern$time
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$day <- as.factor(pattern$day)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
data$interval
head(data$interval_revised)
interval <- format(data$interval_revised,"%H:%M")
interval <- format(data$interval_revised,"%H %M")
head(data$interval_time)
?striptime
?strptime
class(interval)
interval <- format(data$interval_revised,"%H %M")
interval <- format(data$interval_time,"%H %M")
head(interval)
class(interval)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
pattern$time <- format(pattern$time, "%H:%M")
head(pattern)
pattern$time <- as.factor(pattern$time)
head(pattern)
str(pattern)
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")
pattern$time <- as.numeric(pattern$time)
head(pattern)
interval <- format(pattern$time, "%H:%M")
weekdays <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekdays, day = "weekdays")
weekend <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps_weekend, day = "weekend")
pattern <- rbind(weekdays, weekend)
pattern$interval <- format(pattern$time, "%H:%M")
head(pattern)
tail(pattern)
nrow(pattern)
pattern$interval
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_continuous(labels= "00:00","06:00", "12.00","00:00"))
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_continuous(labels= "00:00","06:00", "12.00","00:00")
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_continuous(labels= c("00:00","06:00", "12.00","00:00"))
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_continuous(labels= c("00:00","06:00", "12:00","00:00"))
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_continuous(breaks = waiver(), labels= c("00:00","06:00", "12:00","00:00"))
start <- ISOdate(2001, 1, 1, tz = "")
df <- data.frame(
day30  = start + round(runif(100, max = 30 * 86400)),
day7  = start + round(runif(100, max = 7 * 86400)),
day   = start + round(runif(100, max = 86400)),
hour10 = start + round(runif(100, max = 10 * 3600)),
hour5 = start + round(runif(100, max = 5 * 3600)),
hour  = start + round(runif(100, max = 3600)),
min10 = start + round(runif(100, max = 10 * 60)),
min5  = start + round(runif(100, max = 5 * 60)),
min   = start + round(runif(100, max = 60)),
sec10 = start + round(runif(100, max = 10)),
y = runif(100)
)
df
head(df)
?ISOdate
start
?runif
60*60*24
?date_breaks
?time_breaks
library(ggplot2)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_datetime(labels= "00:00","06:00", "12.00","00:00")
?scale_x_datetime
library(scales)
last_plot()+scale_x_datetime(breaks = date_break("6 hours"))
last_plot()+scale_x_datetime(breaks = date_breaks("6 hours"))
library(ggplot2)
library(scales)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_datetime(labels= date_format(%H:%M))
library(ggplot2)
library(scales)
p <- ggplot(pattern, aes(time, ave_steps,group = day))
p + geom_line(aes(colour = day), size = .7) + labs(x = "Interval", y="Number of steps", title = "Average daily activity pattern")+scale_x_datetime(labels= date_format("%H:%M"))
setwd("~/Desktop/reproducible_research/Rep_project2")
source('~/.active-rstudio-document', echo=TRUE)
names(storm)
nrow(storm)
(73.71-28.52)/73.71
